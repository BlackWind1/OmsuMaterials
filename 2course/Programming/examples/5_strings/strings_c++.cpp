/*
    Для упрощения работы со строками язык C++ предоставляет встроенный тип данных из
    стандартной библиотеки, называемый - string. Для его использования нужно подключить
    следующий заголовочный файл:
        #include <string>

    После этого можно объявлять переменные типа string (данный тип данных является классом):
        std::string s1, s2; // объявляем 2 переменные - s1 и s2

    Данным переменным можно присваивать любую строку в двойных кавычках:
        s1 = "This is English string";
        s2 = "А тут текст на русском";

    В отличии от строк в стиле-C (массивов типа char), переменные класса string можно без
    проблем присваивать друг другу:
        std::string s3 = s2;

    и использовать все привычные операторы сравнения (как для типов int и double):
        if ( s1 != s2 ) {
            std::cout << "Строки не равны\n";
        }

        if ( s2 == s3 ) {
            std::cout << "Строка s2 равна s3\n";
        }

        // Ниже фактически сравниваются коды символов, из которых состоит строка
        // Первые несовпадающие символы будут проверены по их внутреннему числовому коду
        // И, следовательно, фактически сравнение идёт для целых чисел.
        bool is_greater = s1 > s2;

    Вывод на экран консоли прост:
        std::cout << "Введённая строка:\n";
        std::cout << s1;

    Можно выводить и посимвольно, операция индексации аналогична массивам:
        // Вывод первого и четвёртого символа из строки s2
        std::cout << s2[0] << " " << s2[3];

    Ввести строку можно с помощью специальной функции getline, определённой в <string>
    (она отличается от cin.getline):
        std::string s4;
        std::getline(cin, s4);

    Данная функция принимает два обязательных аргумента:
        -> объект, отвечающий за ввод символов от пользователя (для консоли это - cin)
        -> строку, куда записывается результат
        [->] третий параметр не обязательный, но можно задать символ-разделитель. По умолчанию
            это '\n' (перенос строки с помощью нажатия клавиши Enter)

        std::string s5;
        std::getline(cin, s5, '*'); // в строку будут записаны все символы (включая перенос строки),
                                    // пока не будет введён символ - *

    Объединять строки можно с помощью оператора + (и его разновидностей: +=). Складывать можно как
    две переменные класса string, так и со строками в двойных кавычках:
        std::string s6 = s1 + s2;
        s6 += "Ещё одна строка";

    Для переменных типа string определены много полезных методов (функций, вызываемых на конкретном объекте).

    Начнём с length():
        // Вывод длины строки
        std::cout << "Длина строки: " << s6.length();

    Также, как и в случае функции strlen для C-строк, фактически считается количество байт, а не
    реальное количество символов.

*/

#include <iostream>
#include <string> // strlen и другие функции работы со строками
#include <clocale>


// Аргумент в функцию передаётся по постоянной ссылке, для того,
// чтобы избежать копирования большого объёма текста
void print_any_string_info(const std::string& str)
{
    std::cout << "Длина строки: " << str.length() << '\n';
    std::cout << "Содержимое строки:\n" << str << '\n';
}

int main()
{
    std::setlocale(LC_ALL, "RUS");

    std::string s1 = "Быть или";
    s1 += " не быть. Вот в чём вопрос";

    print_any_string_info(s1);

    std::string s2;
    std::cout << "Введите строку. Окончание ввода - восклицательный знак + нажатие Enter\n";
    std::getline(std::cin, s2, '!');

    print_any_string_info(s2);
    return 0;
}
