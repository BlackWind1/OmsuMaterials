/*
    В языке С++ базовая работа с символами и строками аналогична C.

    Символы заключаются в одинарные кавычки
        'a', '8', '&', ' '

    Фактически, каждый символ представляет из себя некоторый знак: буквы, цифра, плюс, минус и прочие.
    Однако, в C/C++ некоторые символы состоят из нескольких знаков. Как пример, набор слеш-последовательностей:
        '\n' - символ новой строки. Сам символ - один, но представлен двумя знаками
        '\t' - символ табуляции. Аналогичный случай.

    Для работы с символами в C используется тип char
        char symb1 = '4', symb2 = 'a';

    Для вывода символа на консоль осуществляется так:
        cout << symb1; // вывести переменную типа char на экран
    или так:
        cout.put(symb1);

    Получить символ с стандартного потока ввода можно так:
        cin >> symb2; // считать первый введённый символ в переменную symb2
    или так:
        cin.get(symb2);
    и даже так:
        symb2 = cin.get(); // правда тут cin.get() возращает целое число типа int


    Каждому символу сопостовляется внутренний код - целое число. Поэтому с переменными
    типа char можно обращаться как с целочисленными величинами. Более того, порядок кодов символов
    неизменен, для примера - смотрите таблицу ASCII кодов в пособии. Из-за этого, символы могут
    принимать участие в арифметических операциях и операциях сравнения:
        char sym = '1';

        sym += 1; // увеличит код символа на 1. В соответствии с таблицей ASCII
                  // в переменной sym будет находится символ двойки: '2';

        if ( sym > '5' ) { // сравниваем символы
            // не выполнится, потому что '2' раньше '5'
        } else {
            cout << "Else branch";
        }

        int code = int( sym ); // получение целочисленного кода определённого символа с помощью приведения типов

        if ( sym >= '0' && sym <= '9' ) { // проверяем, что в переменной sym находится символ цифры
            ...
        }

    ************************************************************************************
    Под строкой понимается набор символов, заключённых в двойные кавычки:
        "A simple string"
        "89983 - something important"
        "abcdefg"

    Для строк не введён специальный тип. Для их хранения используется массив типа char:
        char str[] = "Str1"; // В C++ такие строки называют "строками в стиле C".
    Выше определяется массив str типа char. Ему присваивается строка "Str1".
    Из-за особенностей массивов в C было принято, что последним символом должен обязательно идти
    символ конца строки - '\0'. Таким образом, str представляется в виде массива из 5 символов:
        ['S', 't', 'r', '1', '\0']
    При том, что в исходной строке - всего 4 символа. Для C наличие символа конца строки очень важно,
    все функции обработки строк предполагают, что переданные им массивы будут содержать в себе
    этот символ последним элементом.

    Определение str может быть сделано в явном виде как обычный массив:
        char str[] = {'S', 't', 'r', '1', '\0'};

    При этом, нельзя присваивать строку в двойных кавычках уже объявленным массивам:
        char word[10];
        word = "true"; //Ошибка!

    Вывести строку на экран можно так:
        char word[] = "word";
        cout << word;

    Ввод строки:
        char str[30];
        cout << "Enter string:" << endl;
        cin.getline(str, 30); // 30 - размер массива. Максимально будет считано 29 символов и последним добавлен символ конца строки - '\0'
                              // Если было введено менее 30 символов, то все они помещаются в sentence
                              // и после последнего символа помещается символ конца строки. Но
                              // в этом случае в строку попадает и символ переноса строки - '\n'


    Выше указанные функции ввода-вывода опеределены в <iostream>

    Также имеется набор функций из стандартной библиотеки C для работы со строками, определённых в <cstring>.
    Например:
        // Определяем строку, содержащую 32 символа.
        char str[] = "a_long_long_long_word_as_example";
        // Размер массива str в данном случае - 33 символа

        // Функция strlen возращает количество символов в строке
        // без учёта символа конца строки ('\0')
        cout << "The size of str is " << strlen(str) << endl; // будет напечатано: "The size of str is 32"
    Другие примеры - непосредственно в программе.
*/

#include <iostream>
#include <cstring> // strlen и другие функции работы со строками

using namespace std;

void print_eng_letters()
{
    char sym = 'a'; // объявляем переменную типа char и присваиваем ей значение

    cout << "English lowercase letters:" << endl;
    // печатаем все цифры
    while ( sym <= 'z' ) {
        cout.put(sym);
        ++sym; // используем операцию инкремента для увеличения кода символа на единицу
               // тоже самое, что и sym += 1
    }
    cout << endl;
}

int main()
{
    print_eng_letters();

    char letter = 'W';
    // Печатаем букву 'W' и её целочисленный код
    cout << "The symbol and the code: " << letter << " : " << int( letter ) << endl;

    // Объявляем и инициализируем строку
    char first_str[] = "A very very important sentence";

    // вычисляем количество элементов в массиве first_str
    unsigned int char_array_size = sizeof(first_str) / sizeof(first_str[0]);
    // Печатаем строку, её длину с помощью функции strlen, и длину массива first_arr
    // Последние два значения будут различаться на единицу.
    cout << "The string: " << first_str << endl;
    cout << "String size: " << strlen(first_str) << endl;
    cout << "Array size: " << char_array_size << endl << endl;


    /*
        Демонстрация функции strcmp из <string.h>
        Данная функция принимает два аргумента - две строки - и сравнивает из посимвольно.
        Возращает         0    : если все символы совпадают
          значение меньше 0    : если код первого несовпадающего символа в первой строке меньше кода символа во второй строке
          значение больше 0    : если код первого несовпадающего символа в первой строке больше кода символа во второй строке
    */
    char secret_str[] = "just cat"; // задаём строку, при вводе которой будет прерван бесконечный цикл
    char buffer[80];                // массив для хранения введённой пользователем строки

    do {
        cout << "Guess secret string? "; // просим угадать выше определённую строку
        cin.getline(buffer, 80);        // считываем введённую строку
    } while ( strcmp(secret_str, buffer) != 0 ); // проверяем результат функции сравнения строк
    cout << "Correct answer!" << endl;

    /*
        Пример функция strcpy и strncat из string.h
    */
    char str1[20], str2[20], str3[] = "or not to be";
    strcpy(str1, "To be ");         // копируем вторую строку в первую. Даже если в str1 были какие-то символы, они замещаются
                                    // символами из второй строки
    strcpy(str2, str3);             // копируем str3 в str2
    strncat(str1, str2, 6);         // добавляем первые 6 символов из str2 в str1
    cout << str1;                   // печатаем ""To be or not"

    return 0;
}
